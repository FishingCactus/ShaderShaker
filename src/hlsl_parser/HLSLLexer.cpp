/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : HLSL.g
 *     -                            On : 2012-06-14 16:58:03
 *     -                 for the lexer : HLSLLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "HLSLLexer.hpp"
/* ----------------------------------------- */




/** String literals used by HLSLLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x30,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_2[]  = { 0x50, 0x4F, 0x53, 0x49, 0x54, 0x49, 0x4F, 0x4E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_3[]  = { 0x50, 0x69, 0x78, 0x65, 0x6C, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_4[]  = { 0x54, 0x45, 0x58, 0x43, 0x4F, 0x4F, 0x52, 0x44, 0x30,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_5[]  = { 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_6[]  = { 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_7[]  = { 0x63, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_8[]  = { 0x66, 0x6C, 0x6F, 0x61, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_9[]  = { 0x66, 0x6C, 0x6F, 0x61, 0x74, 0x31, 0x78, 0x31,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_10[]  = { 0x66, 0x6C, 0x6F, 0x61, 0x74, 0x31, 0x78, 0x32,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_11[]  = { 0x66, 0x6C, 0x6F, 0x61, 0x74, 0x32,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_12[]  = { 0x66, 0x6C, 0x6F, 0x61, 0x74, 0x33,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_13[]  = { 0x66, 0x6C, 0x6F, 0x61, 0x74, 0x34,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_14[]  = { 0x70, 0x61, 0x73, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_15[]  = { 0x70, 0x73, 0x5F, 0x33, 0x5F, 0x30,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_16[]  = { 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_17[]  = { 0x73, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x72, 0x32, 0x44,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_18[]  = { 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_19[]  = { 0x74, 0x65, 0x63, 0x68, 0x6E, 0x69, 0x71, 0x75, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_20[]  = { 0x76, 0x73, 0x5F, 0x33, 0x5F, 0x30,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_21[]  = { 0x2F, 0x2F,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_22[]  = { 0x2F, 0x2A,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_23[]  = { 0x2A, 0x2F,  antlr3::ANTLR_STRING_TERMINATOR};



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */


HLSLLexer::~HLSLLexer()
{
}

void
HLSLLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "HLSL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* HLSLLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called HLSLLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pHLSLLexer initialized for the lex start
 *     - Fail NULL
 */
HLSLLexer::HLSLLexer(StreamType* instream)
:HLSLLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called HLSLLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pHLSLLexer initialized for the lex start
 *     - Fail NULL
 */
HLSLLexer::HLSLLexer(StreamType* instream, RecognizerSharedStateType* state)
:HLSLLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void HLSLLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in HLSLLexer.h here so you can get a sense
     * of what goes where.
     */

}


/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    164:1: FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );
 */
static const ANTLR_INT32 dfa9_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa9_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa9_min[5] =
    {
	46, 46, -1, -1, -1
    };
static const ANTLR_INT32 dfa9_max[5] =
    {
	57, 101, -1, -1, -1
    };
static const ANTLR_INT32 dfa9_accept[5] =
    {
	-1, -1, 2, 1, 3
    };
static const ANTLR_INT32 dfa9_special[5] =
    {
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa9_T_empty	 =   NULL;

static const ANTLR_INT32 dfa9_T0[] =
    {
	2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };

static const ANTLR_INT32 dfa9_T1[] =
    {
	3, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa9_transitions[] =
{
    dfa9_T0, dfa9_T1, NULL, NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 9
 */
class HLSLLexerCyclicDFA9 : public CyclicDFA< HLSLLexerImplTraits, HLSLLexer >, public HLSLLexerTokens
{
public:
	typedef CyclicDFA< HLSLLexerImplTraits, HLSLLexer >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	HLSLLexerCyclicDFA9( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static HLSLLexerCyclicDFA9  cdfa9(
	    9,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"164:1: FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );",
	    dfa9_eot,	    /* EOT table			    */
	    dfa9_eof,	    /* EOF table			    */
	    dfa9_min,	    /* Minimum tokens for each state    */
	    dfa9_max,	    /* Maximum tokens for each state    */
	    dfa9_accept,	/* Accept table			    */
	    dfa9_special,	/* Special transition states	    */
	    dfa9_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 9
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | ID | INT | FLOAT | COMMENT | WS | STRING | LEFT_CURLY | RIGHT_CURLY );
 */
static const ANTLR_INT32 dfa19_eot[154] =
    {
	-1, -1, -1, -1, 28, -1, -1, -1, -1, -1, 21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, -1, 45, -1, -1, -1, -1, -1, -1, -1, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 21, -1, 21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 84, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 102, -1, 21, 21, 21, 21, 21, 
	21, 109, 21, 21, 21, 21, 21, 21, 21, 117, 118, 119, -1, 120, 121, 21, 123, 
	21, 125, -1, 21, 21, 21, 129, 21, 131, 21, -1, -1, -1, -1, -1, 21, -1, 
	21, -1, 136, 21, 21, -1, 21, -1, 140, 141, 21, 21, -1, 21, 145, 21, -1, 
	-1, 147, 148, 21, -1, 21, -1, -1, 151, 21, -1, 153, -1
    };
static const ANTLR_INT32 dfa19_eof[154] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa19_min[154] =
    {
	9, -1, -1, -1, 48, -1, -1, -1, -1, -1, 79, 79, 69, 101, 111, 108, 97, 101, 
	97, 101, 115, -1, 46, -1, -1, -1, -1, -1, -1, -1, 76, 83, 120, 88, 120, 
	114, 109, 111, 115, 95, 116, 109, 114, 99, 95, -1, 79, 73, 101, 67, 116, 
	116, 112, 97, 115, 51, 117, 112, 117, 104, 51, 82, 84, 108, 79, 117, 101, 
	105, 116, 48, 95, 114, 108, 99, 110, 95, 48, 73, 83, 79, 114, 120, 108, 
	48, -1, 48, 110, 101, 116, 105, 48, 48, 79, 104, 82, 101, 83, 101, 120, 
	48, 48, 48, -1, 48, 48, 114, 48, 113, 48, -1, 78, 97, 68, 48, 104, 48, 
	49, -1, -1, -1, -1, -1, 50, -1, 117, -1, 48, 100, 48, -1, 97, -1, 48, 48, 
	68, 101, -1, 101, 48, 100, -1, -1, 48, 48, 114, -1, 101, -1, -1, 48, 114, 
	-1, 48, -1
    };
static const ANTLR_INT32 dfa19_max[154] =
    {
	125, -1, -1, -1, 57, -1, -1, -1, -1, -1, 79, 105, 101, 101, 111, 108, 115, 
	101, 116, 101, 115, -1, 101, -1, -1, -1, -1, -1, -1, -1, 76, 83, 120, 88, 
	120, 114, 109, 111, 115, 95, 116, 109, 114, 99, 95, -1, 79, 73, 101, 67, 
	116, 116, 112, 97, 115, 51, 117, 112, 117, 104, 51, 82, 84, 108, 79, 117, 
	101, 105, 116, 122, 95, 114, 108, 99, 110, 95, 48, 73, 83, 79, 114, 120, 
	108, 122, -1, 48, 110, 101, 116, 105, 48, 122, 79, 104, 82, 101, 83, 101, 
	120, 122, 122, 122, -1, 122, 122, 114, 122, 113, 122, -1, 78, 97, 68, 122, 
	104, 122, 50, -1, -1, -1, -1, -1, 50, -1, 117, -1, 122, 100, 48, -1, 97, 
	-1, 122, 122, 68, 101, -1, 101, 122, 100, -1, -1, 122, 122, 114, -1, 101, 
	-1, -1, 122, 114, -1, 122, -1
    };
static const ANTLR_INT32 dfa19_accept[154] =
    {
	-1, 1, 2, 3, -1, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 30, -1, 33, 34, 35, 36, 37, 4, 32, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, 10, 
	-1, -1, -1, -1, -1, -1, -1, 20, 21, 22, 24, 25, -1, 27, -1, 29, -1, -1, 
	-1, 14, -1, 16, -1, -1, -1, -1, 11, -1, -1, -1, 18, 19, -1, -1, -1, 13, 
	-1, 26, 28, -1, -1, 12, -1, 15
    };
static const ANTLR_INT32 dfa19_special[154] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa19_T_empty	 =   NULL;

static const ANTLR_INT32 dfa19_T0[] =
    {
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21, -1, -1, -1, -1, -1, -1, -1, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, -1, -1, -1, -1, 21, -1, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21
    };

static const ANTLR_INT32 dfa19_T1[] =
    {
	38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	39
    };

static const ANTLR_INT32 dfa19_T2[] =
    {
	29, -1, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 29
    };

static const ANTLR_INT32 dfa19_T3[] =
    {
	135
    };

static const ANTLR_INT32 dfa19_T4[] =
    {
	124
    };

static const ANTLR_INT32 dfa19_T5[] =
    {
	107
    };

static const ANTLR_INT32 dfa19_T6[] =
    {
	89
    };

static const ANTLR_INT32 dfa19_T7[] =
    {
	74
    };

static const ANTLR_INT32 dfa19_T8[] =
    {
	59
    };

static const ANTLR_INT32 dfa19_T9[] =
    {
	106
    };

static const ANTLR_INT32 dfa19_T10[] =
    {
	88
    };

static const ANTLR_INT32 dfa19_T11[] =
    {
	73
    };

static const ANTLR_INT32 dfa19_T12[] =
    {
	58
    };

static const ANTLR_INT32 dfa19_T13[] =
    {
	90
    };

static const ANTLR_INT32 dfa19_T14[] =
    {
	108
    };

static const ANTLR_INT32 dfa19_T15[] =
    {
	60
    };

static const ANTLR_INT32 dfa19_T16[] =
    {
	37
    };

static const ANTLR_INT32 dfa19_T17[] =
    {
	31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 32
    };

static const ANTLR_INT32 dfa19_T18[] =
    {
	75
    };

static const ANTLR_INT32 dfa19_T19[] =
    {
	24, 24, -1, 24, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 24, -1, 25, -1, -1, -1, -1, -1, 1, 2, -1, -1, 3, -1, 
	4, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 5, 6, 7, 8, 9, -1, -1, 21, 
	21, 10, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 11, 21, 21, 21, 
	12, 21, 13, 21, 21, 21, 21, -1, -1, -1, -1, 21, -1, 21, 21, 14, 21, 21, 
	15, 21, 21, 21, 21, 21, 21, 21, 21, 21, 16, 21, 17, 18, 19, 21, 20, 21, 
	21, 21, 21, 26, -1, 27
    };

static const ANTLR_INT32 dfa19_T20[] =
    {
	143
    };

static const ANTLR_INT32 dfa19_T21[] =
    {
	138
    };

static const ANTLR_INT32 dfa19_T22[] =
    {
	112
    };

static const ANTLR_INT32 dfa19_T23[] =
    {
	128
    };

static const ANTLR_INT32 dfa19_T24[] =
    {
	53
    };

static const ANTLR_INT32 dfa19_T25[] =
    {
	79
    };

static const ANTLR_INT32 dfa19_T26[] =
    {
	94
    };

static const ANTLR_INT32 dfa19_T27[] =
    {
	49
    };

static const ANTLR_INT32 dfa19_T28[] =
    {
	64
    };

static const ANTLR_INT32 dfa19_T29[] =
    {
	127
    };

static const ANTLR_INT32 dfa19_T30[] =
    {
	68
    };

static const ANTLR_INT32 dfa19_T31[] =
    {
	111
    };

static const ANTLR_INT32 dfa19_T32[] =
    {
	93
    };

static const ANTLR_INT32 dfa19_T33[] =
    {
	78
    };

static const ANTLR_INT32 dfa19_T34[] =
    {
	149
    };

static const ANTLR_INT32 dfa19_T35[] =
    {
	144
    };

static const ANTLR_INT32 dfa19_T36[] =
    {
	137
    };

static const ANTLR_INT32 dfa19_T37[] =
    {
	126
    };

static const ANTLR_INT32 dfa19_T38[] =
    {
	35
    };

static const ANTLR_INT32 dfa19_T39[] =
    {
	63
    };

static const ANTLR_INT32 dfa19_T40[] =
    {
	48
    };

static const ANTLR_INT32 dfa19_T41[] =
    {
	83
    };

static const ANTLR_INT32 dfa19_T42[] =
    {
	47
    };

static const ANTLR_INT32 dfa19_T43[] =
    {
	62
    };

static const ANTLR_INT32 dfa19_T44[] =
    {
	77
    };

static const ANTLR_INT32 dfa19_T45[] =
    {
	92
    };

static const ANTLR_INT32 dfa19_T46[] =
    {
	110
    };

static const ANTLR_INT32 dfa19_T47[] =
    {
	46
    };

static const ANTLR_INT32 dfa19_T48[] =
    {
	61
    };

static const ANTLR_INT32 dfa19_T49[] =
    {
	36
    };

static const ANTLR_INT32 dfa19_T50[] =
    {
	76
    };

static const ANTLR_INT32 dfa19_T51[] =
    {
	91
    };

static const ANTLR_INT32 dfa19_T52[] =
    {
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29
    };

static const ANTLR_INT32 dfa19_T53[] =
    {
	113
    };

static const ANTLR_INT32 dfa19_T54[] =
    {
	80
    };

static const ANTLR_INT32 dfa19_T55[] =
    {
	95
    };

static const ANTLR_INT32 dfa19_T56[] =
    {
	50
    };

static const ANTLR_INT32 dfa19_T57[] =
    {
	65
    };

static const ANTLR_INT32 dfa19_T58[] =
    {
	114
    };

static const ANTLR_INT32 dfa19_T59[] =
    {
	130
    };

static const ANTLR_INT32 dfa19_T60[] =
    {
	30
    };

static const ANTLR_INT32 dfa19_T61[] =
    {
	81
    };

static const ANTLR_INT32 dfa19_T62[] =
    {
	96
    };

static const ANTLR_INT32 dfa19_T63[] =
    {
	51
    };

static const ANTLR_INT32 dfa19_T64[] =
    {
	66
    };

static const ANTLR_INT32 dfa19_T65[] =
    {
	152
    };

static const ANTLR_INT32 dfa19_T66[] =
    {
	150
    };

static const ANTLR_INT32 dfa19_T67[] =
    {
	146
    };

static const ANTLR_INT32 dfa19_T68[] =
    {
	139
    };

static const ANTLR_INT32 dfa19_T69[] =
    {
	115
    };

static const ANTLR_INT32 dfa19_T70[] =
    {
	97
    };

static const ANTLR_INT32 dfa19_T71[] =
    {
	82
    };

static const ANTLR_INT32 dfa19_T72[] =
    {
	67
    };

static const ANTLR_INT32 dfa19_T73[] =
    {
	52
    };

static const ANTLR_INT32 dfa19_T74[] =
    {
	55
    };

static const ANTLR_INT32 dfa19_T75[] =
    {
	70
    };

static const ANTLR_INT32 dfa19_T76[] =
    {
	85
    };

static const ANTLR_INT32 dfa19_T77[] =
    {
	103
    };

static const ANTLR_INT32 dfa19_T78[] =
    {
	116
    };

static const ANTLR_INT32 dfa19_T79[] =
    {
	56
    };

static const ANTLR_INT32 dfa19_T80[] =
    {
	132, 133
    };

static const ANTLR_INT32 dfa19_T81[] =
    {
	71
    };

static const ANTLR_INT32 dfa19_T82[] =
    {
	86
    };

static const ANTLR_INT32 dfa19_T83[] =
    {
	33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34
    };

static const ANTLR_INT32 dfa19_T84[] =
    {
	104
    };

static const ANTLR_INT32 dfa19_T85[] =
    {
	57
    };

static const ANTLR_INT32 dfa19_T86[] =
    {
	44
    };

static const ANTLR_INT32 dfa19_T87[] =
    {
	87
    };

static const ANTLR_INT32 dfa19_T88[] =
    {
	72
    };

static const ANTLR_INT32 dfa19_T89[] =
    {
	122
    };

static const ANTLR_INT32 dfa19_T90[] =
    {
	105
    };

static const ANTLR_INT32 dfa19_T91[] =
    {
	142
    };

static const ANTLR_INT32 dfa19_T92[] =
    {
	134
    };

static const ANTLR_INT32 dfa19_T93[] =
    {
	41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 42
    };

static const ANTLR_INT32 dfa19_T94[] =
    {
	43
    };

static const ANTLR_INT32 dfa19_T95[] =
    {
	21, 98, 99, 100, 101, 21, 21, 21, 21, 21, -1, -1, -1, -1, -1, -1, -1, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, -1, -1, -1, -1, 21, -1, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21
    };

static const ANTLR_INT32 dfa19_T96[] =
    {
	40
    };

static const ANTLR_INT32 dfa19_T97[] =
    {
	69
    };

static const ANTLR_INT32 dfa19_T98[] =
    {
	54
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa19_transitions[] =
{
    dfa19_T19, NULL, NULL, NULL, dfa19_T52, NULL, NULL, NULL, NULL, NULL, 
    dfa19_T60, dfa19_T17, dfa19_T83, dfa19_T38, dfa19_T49, dfa19_T16, dfa19_T1, 
    dfa19_T96, dfa19_T93, dfa19_T94, dfa19_T86, NULL, dfa19_T2, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, dfa19_T47, dfa19_T42, dfa19_T40, dfa19_T27, 
    dfa19_T56, dfa19_T63, dfa19_T73, dfa19_T24, dfa19_T98, dfa19_T74, dfa19_T79, 
    dfa19_T85, dfa19_T12, dfa19_T8, dfa19_T15, NULL, dfa19_T48, dfa19_T43, 
    dfa19_T39, dfa19_T28, dfa19_T57, dfa19_T64, dfa19_T72, dfa19_T30, dfa19_T97, 
    dfa19_T75, dfa19_T81, dfa19_T88, dfa19_T11, dfa19_T7, dfa19_T18, dfa19_T50, 
    dfa19_T44, dfa19_T33, dfa19_T25, dfa19_T54, dfa19_T61, dfa19_T71, dfa19_T41, 
    dfa19_T0, dfa19_T76, dfa19_T82, dfa19_T87, dfa19_T10, dfa19_T6, dfa19_T13, 
    dfa19_T51, dfa19_T45, dfa19_T32, dfa19_T26, dfa19_T55, dfa19_T62, dfa19_T70, 
    dfa19_T95, NULL, dfa19_T77, dfa19_T84, dfa19_T90, dfa19_T9, dfa19_T5, 
    dfa19_T14, dfa19_T0, dfa19_T46, dfa19_T31, dfa19_T22, dfa19_T53, dfa19_T58, 
    dfa19_T69, dfa19_T78, dfa19_T0, dfa19_T0, dfa19_T0, NULL, dfa19_T0, 
    dfa19_T0, dfa19_T89, dfa19_T0, dfa19_T4, dfa19_T0, NULL, dfa19_T37, 
    dfa19_T29, dfa19_T23, dfa19_T0, dfa19_T59, dfa19_T0, dfa19_T80, NULL, 
    NULL, NULL, NULL, NULL, dfa19_T92, NULL, dfa19_T3, NULL, dfa19_T0, dfa19_T36, 
    dfa19_T21, NULL, dfa19_T68, NULL, dfa19_T0, dfa19_T0, dfa19_T91, dfa19_T20, 
    NULL, dfa19_T35, dfa19_T0, dfa19_T67, NULL, NULL, dfa19_T0, dfa19_T0, 
    dfa19_T34, NULL, dfa19_T66, NULL, NULL, dfa19_T0, dfa19_T65, NULL, dfa19_T0, 
    NULL
};


/* Declare tracking structure for Cyclic DFA 19
 */
class HLSLLexerCyclicDFA19 : public CyclicDFA< HLSLLexerImplTraits, HLSLLexer >, public HLSLLexerTokens
{
public:
	typedef CyclicDFA< HLSLLexerImplTraits, HLSLLexer >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	HLSLLexerCyclicDFA19( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static HLSLLexerCyclicDFA19  cdfa19(
	    19,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"1:1: Tokens : ( T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | ID | INT | FLOAT | COMMENT | WS | STRING | LEFT_CURLY | RIGHT_CURLY );",
	    dfa19_eot,	    /* EOT table			    */
	    dfa19_eof,	    /* EOF table			    */
	    dfa19_min,	    /* Minimum tokens for each state    */
	    dfa19_max,	    /* Maximum tokens for each state    */
	    dfa19_accept,	/* Accept table			    */
	    dfa19_special,	/* Special transition states	    */
	    dfa19_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 19
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 17:7: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__16
 *
 * Looks to match the characters the constitute the token T__16
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__16()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__16;


    // HLSL.g:17:7: ( '(' )
    // HLSL.g:17:9: '('
    {
         this->matchc('(');
        if  (this->hasException())
        {
            goto ruleT__16Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__16Ex; /* Prevent compiler warnings */
    ruleT__16Ex: ;

}
// $ANTLR end T__16

//   Comes from: 18:7: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__17
 *
 * Looks to match the characters the constitute the token T__17
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__17()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__17;


    // HLSL.g:18:7: ( ')' )
    // HLSL.g:18:9: ')'
    {
         this->matchc(')');
        if  (this->hasException())
        {
            goto ruleT__17Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__17Ex; /* Prevent compiler warnings */
    ruleT__17Ex: ;

}
// $ANTLR end T__17

//   Comes from: 19:7: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__18
 *
 * Looks to match the characters the constitute the token T__18
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__18()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__18;


    // HLSL.g:19:7: ( ',' )
    // HLSL.g:19:9: ','
    {
         this->matchc(',');
        if  (this->hasException())
        {
            goto ruleT__18Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__18Ex; /* Prevent compiler warnings */
    ruleT__18Ex: ;

}
// $ANTLR end T__18

//   Comes from: 20:7: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__19
 *
 * Looks to match the characters the constitute the token T__19
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__19()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__19;


    // HLSL.g:20:7: ( '.' )
    // HLSL.g:20:9: '.'
    {
         this->matchc('.');
        if  (this->hasException())
        {
            goto ruleT__19Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__19Ex; /* Prevent compiler warnings */
    ruleT__19Ex: ;

}
// $ANTLR end T__19

//   Comes from: 21:7: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__20
 *
 * Looks to match the characters the constitute the token T__20
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__20()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__20;


    // HLSL.g:21:7: ( ':' )
    // HLSL.g:21:9: ':'
    {
         this->matchc(':');
        if  (this->hasException())
        {
            goto ruleT__20Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__20Ex; /* Prevent compiler warnings */
    ruleT__20Ex: ;

}
// $ANTLR end T__20

//   Comes from: 22:7: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__21
 *
 * Looks to match the characters the constitute the token T__21
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__21()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__21;


    // HLSL.g:22:7: ( ';' )
    // HLSL.g:22:9: ';'
    {
         this->matchc(';');
        if  (this->hasException())
        {
            goto ruleT__21Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__21Ex; /* Prevent compiler warnings */
    ruleT__21Ex: ;

}
// $ANTLR end T__21

//   Comes from: 23:7: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__22
 *
 * Looks to match the characters the constitute the token T__22
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__22()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__22;


    // HLSL.g:23:7: ( '<' )
    // HLSL.g:23:9: '<'
    {
         this->matchc('<');
        if  (this->hasException())
        {
            goto ruleT__22Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__22Ex; /* Prevent compiler warnings */
    ruleT__22Ex: ;

}
// $ANTLR end T__22

//   Comes from: 24:7: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__23
 *
 * Looks to match the characters the constitute the token T__23
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__23()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__23;


    // HLSL.g:24:7: ( '=' )
    // HLSL.g:24:9: '='
    {
         this->matchc('=');
        if  (this->hasException())
        {
            goto ruleT__23Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__23Ex; /* Prevent compiler warnings */
    ruleT__23Ex: ;

}
// $ANTLR end T__23

//   Comes from: 25:7: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__24
 *
 * Looks to match the characters the constitute the token T__24
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__24()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__24;


    // HLSL.g:25:7: ( '>' )
    // HLSL.g:25:9: '>'
    {
         this->matchc('>');
        if  (this->hasException())
        {
            goto ruleT__24Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__24Ex; /* Prevent compiler warnings */
    ruleT__24Ex: ;

}
// $ANTLR end T__24

//   Comes from: 26:7: ( 'COLOR0' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__25
 *
 * Looks to match the characters the constitute the token T__25
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__25()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__25;


    // HLSL.g:26:7: ( 'COLOR0' )
    // HLSL.g:26:9: 'COLOR0'
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleT__25Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__25Ex; /* Prevent compiler warnings */
    ruleT__25Ex: ;

}
// $ANTLR end T__25

//   Comes from: 27:7: ( 'POSITION' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__26
 *
 * Looks to match the characters the constitute the token T__26
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__26()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__26;


    // HLSL.g:27:7: ( 'POSITION' )
    // HLSL.g:27:9: 'POSITION'
    {
        this->matchs(lit_2);
        if  (this->hasException())
        {
            goto ruleT__26Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__26Ex; /* Prevent compiler warnings */
    ruleT__26Ex: ;

}
// $ANTLR end T__26

//   Comes from: 28:7: ( 'PixelShader' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__27
 *
 * Looks to match the characters the constitute the token T__27
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__27()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__27;


    // HLSL.g:28:7: ( 'PixelShader' )
    // HLSL.g:28:9: 'PixelShader'
    {
        this->matchs(lit_3);
        if  (this->hasException())
        {
            goto ruleT__27Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__27Ex; /* Prevent compiler warnings */
    ruleT__27Ex: ;

}
// $ANTLR end T__27

//   Comes from: 29:7: ( 'TEXCOORD0' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__28
 *
 * Looks to match the characters the constitute the token T__28
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__28()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__28;


    // HLSL.g:29:7: ( 'TEXCOORD0' )
    // HLSL.g:29:9: 'TEXCOORD0'
    {
        this->matchs(lit_4);
        if  (this->hasException())
        {
            goto ruleT__28Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__28Ex; /* Prevent compiler warnings */
    ruleT__28Ex: ;

}
// $ANTLR end T__28

//   Comes from: 30:7: ( 'Texture' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__29
 *
 * Looks to match the characters the constitute the token T__29
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__29()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__29;


    // HLSL.g:30:7: ( 'Texture' )
    // HLSL.g:30:9: 'Texture'
    {
        this->matchs(lit_5);
        if  (this->hasException())
        {
            goto ruleT__29Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__29Ex; /* Prevent compiler warnings */
    ruleT__29Ex: ;

}
// $ANTLR end T__29

//   Comes from: 31:7: ( 'VertexShader' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__30
 *
 * Looks to match the characters the constitute the token T__30
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__30()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__30;


    // HLSL.g:31:7: ( 'VertexShader' )
    // HLSL.g:31:9: 'VertexShader'
    {
        this->matchs(lit_6);
        if  (this->hasException())
        {
            goto ruleT__30Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__30Ex; /* Prevent compiler warnings */
    ruleT__30Ex: ;

}
// $ANTLR end T__30

//   Comes from: 32:7: ( 'compile' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__31
 *
 * Looks to match the characters the constitute the token T__31
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__31()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__31;


    // HLSL.g:32:7: ( 'compile' )
    // HLSL.g:32:9: 'compile'
    {
        this->matchs(lit_7);
        if  (this->hasException())
        {
            goto ruleT__31Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__31Ex; /* Prevent compiler warnings */
    ruleT__31Ex: ;

}
// $ANTLR end T__31

//   Comes from: 33:7: ( 'float' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__32
 *
 * Looks to match the characters the constitute the token T__32
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__32()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__32;


    // HLSL.g:33:7: ( 'float' )
    // HLSL.g:33:9: 'float'
    {
        this->matchs(lit_8);
        if  (this->hasException())
        {
            goto ruleT__32Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__32Ex; /* Prevent compiler warnings */
    ruleT__32Ex: ;

}
// $ANTLR end T__32

//   Comes from: 34:7: ( 'float1x1' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__33
 *
 * Looks to match the characters the constitute the token T__33
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__33()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__33;


    // HLSL.g:34:7: ( 'float1x1' )
    // HLSL.g:34:9: 'float1x1'
    {
        this->matchs(lit_9);
        if  (this->hasException())
        {
            goto ruleT__33Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__33Ex; /* Prevent compiler warnings */
    ruleT__33Ex: ;

}
// $ANTLR end T__33

//   Comes from: 35:7: ( 'float1x2' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__34
 *
 * Looks to match the characters the constitute the token T__34
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__34()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__34;


    // HLSL.g:35:7: ( 'float1x2' )
    // HLSL.g:35:9: 'float1x2'
    {
        this->matchs(lit_10);
        if  (this->hasException())
        {
            goto ruleT__34Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__34Ex; /* Prevent compiler warnings */
    ruleT__34Ex: ;

}
// $ANTLR end T__34

//   Comes from: 36:7: ( 'float2' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__35
 *
 * Looks to match the characters the constitute the token T__35
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__35()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__35;


    // HLSL.g:36:7: ( 'float2' )
    // HLSL.g:36:9: 'float2'
    {
        this->matchs(lit_11);
        if  (this->hasException())
        {
            goto ruleT__35Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__35Ex; /* Prevent compiler warnings */
    ruleT__35Ex: ;

}
// $ANTLR end T__35

//   Comes from: 37:7: ( 'float3' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__36
 *
 * Looks to match the characters the constitute the token T__36
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__36()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__36;


    // HLSL.g:37:7: ( 'float3' )
    // HLSL.g:37:9: 'float3'
    {
        this->matchs(lit_12);
        if  (this->hasException())
        {
            goto ruleT__36Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__36Ex; /* Prevent compiler warnings */
    ruleT__36Ex: ;

}
// $ANTLR end T__36

//   Comes from: 38:7: ( 'float4' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__37
 *
 * Looks to match the characters the constitute the token T__37
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__37()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__37;


    // HLSL.g:38:7: ( 'float4' )
    // HLSL.g:38:9: 'float4'
    {
        this->matchs(lit_13);
        if  (this->hasException())
        {
            goto ruleT__37Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__37Ex; /* Prevent compiler warnings */
    ruleT__37Ex: ;

}
// $ANTLR end T__37

//   Comes from: 39:7: ( 'pass' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__38
 *
 * Looks to match the characters the constitute the token T__38
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__38()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__38;


    // HLSL.g:39:7: ( 'pass' )
    // HLSL.g:39:9: 'pass'
    {
        this->matchs(lit_14);
        if  (this->hasException())
        {
            goto ruleT__38Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__38Ex; /* Prevent compiler warnings */
    ruleT__38Ex: ;

}
// $ANTLR end T__38

//   Comes from: 40:7: ( 'ps_3_0' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__39
 *
 * Looks to match the characters the constitute the token T__39
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__39()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__39;


    // HLSL.g:40:7: ( 'ps_3_0' )
    // HLSL.g:40:9: 'ps_3_0'
    {
        this->matchs(lit_15);
        if  (this->hasException())
        {
            goto ruleT__39Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__39Ex; /* Prevent compiler warnings */
    ruleT__39Ex: ;

}
// $ANTLR end T__39

//   Comes from: 41:7: ( 'return' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__40
 *
 * Looks to match the characters the constitute the token T__40
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__40()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__40;


    // HLSL.g:41:7: ( 'return' )
    // HLSL.g:41:9: 'return'
    {
        this->matchs(lit_16);
        if  (this->hasException())
        {
            goto ruleT__40Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__40Ex; /* Prevent compiler warnings */
    ruleT__40Ex: ;

}
// $ANTLR end T__40

//   Comes from: 42:7: ( 'sampler2D' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__41
 *
 * Looks to match the characters the constitute the token T__41
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__41()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__41;


    // HLSL.g:42:7: ( 'sampler2D' )
    // HLSL.g:42:9: 'sampler2D'
    {
        this->matchs(lit_17);
        if  (this->hasException())
        {
            goto ruleT__41Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__41Ex; /* Prevent compiler warnings */
    ruleT__41Ex: ;

}
// $ANTLR end T__41

//   Comes from: 43:7: ( 'struct' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__42
 *
 * Looks to match the characters the constitute the token T__42
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__42()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__42;


    // HLSL.g:43:7: ( 'struct' )
    // HLSL.g:43:9: 'struct'
    {
        this->matchs(lit_18);
        if  (this->hasException())
        {
            goto ruleT__42Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__42Ex; /* Prevent compiler warnings */
    ruleT__42Ex: ;

}
// $ANTLR end T__42

//   Comes from: 44:7: ( 'technique' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__43
 *
 * Looks to match the characters the constitute the token T__43
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__43()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__43;


    // HLSL.g:44:7: ( 'technique' )
    // HLSL.g:44:9: 'technique'
    {
        this->matchs(lit_19);
        if  (this->hasException())
        {
            goto ruleT__43Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__43Ex; /* Prevent compiler warnings */
    ruleT__43Ex: ;

}
// $ANTLR end T__43

//   Comes from: 45:7: ( 'vs_3_0' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__44
 *
 * Looks to match the characters the constitute the token T__44
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mT__44()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__44;


    // HLSL.g:45:7: ( 'vs_3_0' )
    // HLSL.g:45:9: 'vs_3_0'
    {
        this->matchs(lit_20);
        if  (this->hasException())
        {
            goto ruleT__44Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__44Ex; /* Prevent compiler warnings */
    ruleT__44Ex: ;

}
// $ANTLR end T__44

//   Comes from: 153:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ID
 *
 * Looks to match the characters the constitute the token ID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mID()
{
    ANTLR_UINT32	_type;
      


    _type	    = ID;


    // HLSL.g:153:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
    // HLSL.g:153:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    {
        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleIDEx;
        }


        // HLSL.g:153:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*

        for (;;)
        {
            int alt1=2;
            switch ( this->LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt1=1;
            	}
                break;

            }

            switch (alt1)
            {
        	case 1:
        	    // HLSL.g:
        	    {
        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleIDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop1;	/* break out of the loop */
        	    break;
            }
        }
        loop1: ; /* Jump out to here if this rule does not match */


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIDEx; /* Prevent compiler warnings */
    ruleIDEx: ;

}
// $ANTLR end ID

//   Comes from: 161:5: ( ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INT
 *
 * Looks to match the characters the constitute the token INT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mINT()
{
    ANTLR_UINT32	_type;
      


    _type	    = INT;


    // HLSL.g:161:5: ( ( '0' .. '9' )+ )
    // HLSL.g:161:7: ( '0' .. '9' )+
    {
        // HLSL.g:161:7: ( '0' .. '9' )+
        {
            int cnt2=0;

            for (;;)
            {
                int alt2=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt2=1;
        		}
        	    break;

        	}

        	switch (alt2)
        	{
        	    case 1:
        	        // HLSL.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleINTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt2 >= 1 )
        		{
        		    goto loop2;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< HLSLLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleINTEx;
        	}
        	cnt2++;
            }
            loop2: ;	/* Jump to here if this rule does not match */
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleINTEx; /* Prevent compiler warnings */
    ruleINTEx: ;

}
// $ANTLR end INT

//   Comes from: 165:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLOAT
 *
 * Looks to match the characters the constitute the token FLOAT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mFLOAT()
{
    ANTLR_UINT32	_type;
      


    _type	    = FLOAT;


    {
        //  HLSL.g:165:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )

        ANTLR_UINT32 alt9;

        alt9=3;

        alt9 = cdfa9.predict(this, this->get_rec(), this->get_istream(), cdfa9 );
        if  (this->hasException())
        {
            goto ruleFLOATEx;
        }

        switch (alt9)
        {
    	case 1:
    	    // HLSL.g:165:9: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
    	    {
    	        // HLSL.g:165:9: ( '0' .. '9' )+
    	        {
    	            int cnt3=0;

    	            for (;;)
    	            {
    	                int alt3=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt3=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt3)
    	        	{
    	        	    case 1:
    	        	        // HLSL.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt3 >= 1 )
    	        		{
    	        		    goto loop3;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< HLSLLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt3++;
    	            }
    	            loop3: ;	/* Jump to here if this rule does not match */
    	        }

    	         this->matchc('.');
    	        if  (this->hasException())
    	        {
    	            goto ruleFLOATEx;
    	        }


    	        // HLSL.g:165:25: ( '0' .. '9' )*

    	        for (;;)
    	        {
    	            int alt4=2;
    	            switch ( this->LA(1) )
    	            {
    	            case '0':
    	            case '1':
    	            case '2':
    	            case '3':
    	            case '4':
    	            case '5':
    	            case '6':
    	            case '7':
    	            case '8':
    	            case '9':
    	            	{
    	            		alt4=1;
    	            	}
    	                break;

    	            }

    	            switch (alt4)
    	            {
    	        	case 1:
    	        	    // HLSL.g:
    	        	    {
    	        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop4;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop4: ; /* Jump out to here if this rule does not match */


    	        // HLSL.g:165:37: ( EXPONENT )?
    	        {
    	            int alt5=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt5=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt5)
    	            {
    	        	case 1:
    	        	    // HLSL.g:165:37: EXPONENT
    	        	    {
    	        	        /* 165:37: EXPONENT */
    	        	        mEXPONENT();
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }



    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 2:
    	    // HLSL.g:166:9: '.' ( '0' .. '9' )+ ( EXPONENT )?
    	    {
    	         this->matchc('.');
    	        if  (this->hasException())
    	        {
    	            goto ruleFLOATEx;
    	        }


    	        // HLSL.g:166:13: ( '0' .. '9' )+
    	        {
    	            int cnt6=0;

    	            for (;;)
    	            {
    	                int alt6=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt6=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt6)
    	        	{
    	        	    case 1:
    	        	        // HLSL.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt6 >= 1 )
    	        		{
    	        		    goto loop6;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< HLSLLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt6++;
    	            }
    	            loop6: ;	/* Jump to here if this rule does not match */
    	        }

    	        // HLSL.g:166:25: ( EXPONENT )?
    	        {
    	            int alt7=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt7=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt7)
    	            {
    	        	case 1:
    	        	    // HLSL.g:166:25: EXPONENT
    	        	    {
    	        	        /* 166:25: EXPONENT */
    	        	        mEXPONENT();
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }



    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 3:
    	    // HLSL.g:167:9: ( '0' .. '9' )+ EXPONENT
    	    {
    	        // HLSL.g:167:9: ( '0' .. '9' )+
    	        {
    	            int cnt8=0;

    	            for (;;)
    	            {
    	                int alt8=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt8=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt8)
    	        	{
    	        	    case 1:
    	        	        // HLSL.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt8 >= 1 )
    	        		{
    	        		    goto loop8;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< HLSLLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt8++;
    	            }
    	            loop8: ;	/* Jump to here if this rule does not match */
    	        }

    	        /* 167:9: ( '0' .. '9' )+ EXPONENT */
    	        mEXPONENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleFLOATEx;
    	        }



    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleFLOATEx; /* Prevent compiler warnings */
    ruleFLOATEx: ;

}
// $ANTLR end FLOAT

//   Comes from: 171:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mCOMMENT()
{
    ANTLR_UINT32	_type;
      


    _type	    = COMMENT;


    {
        //  HLSL.g:171:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )

        ANTLR_UINT32 alt13;

        alt13=2;

        switch ( this->LA(1) )
        {
        case '/':
        	{
        		switch ( this->LA(2) )
        		{
        		case '/':
        			{
        				alt13=1;
        			}
        		    break;
        		case '*':
        			{
        				alt13=2;
        			}
        		    break;

        		default:
        		    ExceptionBaseType* ex = new ANTLR_Exception< HLSLLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        		    ex->set_decisionNum( 13 );
        		    ex->set_state( 1 );


        		    goto ruleCOMMENTEx;

        		}

        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< HLSLLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 13 );
            ex->set_state( 0 );


            goto ruleCOMMENTEx;

        }

        switch (alt13)
        {
    	case 1:
    	    // HLSL.g:171:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    	    {
    	        this->matchs(lit_21);
    	        if  (this->hasException())
    	        {
    	            goto ruleCOMMENTEx;
    	        }




    	        // HLSL.g:171:14: (~ ( '\\n' | '\\r' ) )*

    	        for (;;)
    	        {
    	            int alt10=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA10_0 = this->LA(1);
    	                if ( (((LA10_0 >= 0x0000) && (LA10_0 <= '\t')) || ((LA10_0 >= 0x000B) && (LA10_0 <= '\f')) || ((LA10_0 >= 0x000E) && (LA10_0 <= 0xFFFF))))
    	                {
    	                    alt10=1;
    	                }

    	            }
    	            switch (alt10)
    	            {
    	        	case 1:
    	        	    // HLSL.g:
    	        	    {
    	        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '\t')) || ((this->LA(1) >= 0x000B) && (this->LA(1) <= '\f')) || ((this->LA(1) >= 0x000E) && (this->LA(1) <= 0xFFFF)) )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop10;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop10: ; /* Jump out to here if this rule does not match */


    	        // HLSL.g:171:28: ( '\\r' )?
    	        {
    	            int alt11=2;
    	            switch ( this->LA(1) )
    	            {
    	                case '\r':
    	                	{
    	                		alt11=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt11)
    	            {
    	        	case 1:
    	        	    // HLSL.g:171:28: '\\r'
    	        	    {
    	        	         this->matchc('\r');
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	         this->matchc('\n');
    	        if  (this->hasException())
    	        {
    	            goto ruleCOMMENTEx;
    	        }


    	        {
    	            this->get_state()->get_channel()=HIDDEN;
    	        }


    	    }
    	    break;
    	case 2:
    	    // HLSL.g:172:9: '/*' ( options {greedy=false; } : . )* '*/'
    	    {
    	        this->matchs(lit_22);
    	        if  (this->hasException())
    	        {
    	            goto ruleCOMMENTEx;
    	        }




    	        // HLSL.g:172:14: ( options {greedy=false; } : . )*

    	        for (;;)
    	        {
    	            int alt12=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA12_0 = this->LA(1);
    	                if ( (LA12_0 == '*'))
    	                {
    	                    {
    	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                        */
    	                        int LA12_1 = this->LA(2);
    	                        if ( (LA12_1 == '/'))
    	                        {
    	                            alt12=2;
    	                        }
    	                        else if ( (((LA12_1 >= 0x0000) && (LA12_1 <= '.')) || ((LA12_1 >= '0') && (LA12_1 <= 0xFFFF))))
    	                        {
    	                            alt12=1;
    	                        }

    	                    }
    	                }
    	                else if ( (((LA12_0 >= 0x0000) && (LA12_0 <= ')')) || ((LA12_0 >= '+') && (LA12_0 <= 0xFFFF))))
    	                {
    	                    alt12=1;
    	                }

    	            }
    	            switch (alt12)
    	            {
    	        	case 1:
    	        	    // HLSL.g:172:42: .
    	        	    {
    	        	        this->matchAny();
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop12;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop12: ; /* Jump out to here if this rule does not match */


    	        this->matchs(lit_23);
    	        if  (this->hasException())
    	        {
    	            goto ruleCOMMENTEx;
    	        }




    	        {
    	            this->get_state()->get_channel()=HIDDEN;
    	        }


    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

//   Comes from: 175:5: ( ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mWS()
{
    ANTLR_UINT32	_type;
      


    _type	    = WS;


    // HLSL.g:175:5: ( ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' ) )
    // HLSL.g:175:8: ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' )
    {
        if ( ((this->LA(1) >= '\t') && (this->LA(1) <= '\n')) || ((this->LA(1) >= '\f') && (this->LA(1) <= '\r')) || this->LA(1) == ' ' )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleWSEx;
        }


        {
            this->get_state()->get_channel()=HIDDEN;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 179:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING
 *
 * Looks to match the characters the constitute the token STRING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mSTRING()
{
    ANTLR_UINT32	_type;
      


    _type	    = STRING;


    // HLSL.g:179:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
    // HLSL.g:179:8: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
    {
         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleSTRINGEx;
        }


        // HLSL.g:179:12: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*

        for (;;)
        {
            int alt14=3;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA14_0 = this->LA(1);
                if ( (LA14_0 == '\\'))
                {
                    alt14=1;
                }
                else if ( (((LA14_0 >= 0x0000) && (LA14_0 <= '!')) || ((LA14_0 >= '#') && (LA14_0 <= '[')) || ((LA14_0 >= ']') && (LA14_0 <= 0xFFFF))))
                {
                    alt14=2;
                }

            }
            switch (alt14)
            {
        	case 1:
        	    // HLSL.g:179:14: ESC_SEQ
        	    {
        	        /* 179:14: ESC_SEQ */
        	        mESC_SEQ();
        	        if  (this->hasException())
        	        {
        	            goto ruleSTRINGEx;
        	        }



        	    }
        	    break;
        	case 2:
        	    // HLSL.g:179:24: ~ ( '\\\\' | '\"' )
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '!')) || ((this->LA(1) >= '#') && (this->LA(1) <= '[')) || ((this->LA(1) >= ']') && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleSTRINGEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop14;	/* break out of the loop */
        	    break;
            }
        }
        loop14: ; /* Jump out to here if this rule does not match */


         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleSTRINGEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSTRINGEx; /* Prevent compiler warnings */
    ruleSTRINGEx: ;

}
// $ANTLR end STRING

//   Comes from: 184:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXPONENT
 *
 * Looks to match the characters the constitute the token EXPONENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mEXPONENT()
{
    ANTLR_UINT32	_type;
      



    // HLSL.g:184:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
    // HLSL.g:184:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    {
        if ( this->LA(1) == 'E' || this->LA(1) == 'e' )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleEXPONENTEx;
        }


        // HLSL.g:184:22: ( '+' | '-' )?
        {
            int alt15=2;
            switch ( this->LA(1) )
            {
                case '+':
                case '-':
                	{
                		alt15=1;
                	}
                    break;
            }

            switch (alt15)
            {
        	case 1:
        	    // HLSL.g:
        	    {
        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleEXPONENTEx;
        	        }


        	    }
        	    break;

            }
        }

        // HLSL.g:184:33: ( '0' .. '9' )+
        {
            int cnt16=0;

            for (;;)
            {
                int alt16=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt16=1;
        		}
        	    break;

        	}

        	switch (alt16)
        	{
        	    case 1:
        	        // HLSL.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleEXPONENTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt16 >= 1 )
        		{
        		    goto loop16;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< HLSLLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleEXPONENTEx;
        	}
        	cnt16++;
            }
            loop16: ;	/* Jump to here if this rule does not match */
        }

    }


    // This is where rules clean up and exit
    //
    goto ruleEXPONENTEx; /* Prevent compiler warnings */
    ruleEXPONENTEx: ;

}
// $ANTLR end EXPONENT

//   Comes from: 187:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HEX_DIGIT
 *
 * Looks to match the characters the constitute the token HEX_DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mHEX_DIGIT()
{
    ANTLR_UINT32	_type;
      



    // HLSL.g:187:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    // HLSL.g:
    {
        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'F')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'f')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleHEX_DIGITEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleHEX_DIGITEx; /* Prevent compiler warnings */
    ruleHEX_DIGITEx: ;

}
// $ANTLR end HEX_DIGIT

//   Comes from: 191:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | OCTAL_ESC )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ESC_SEQ
 *
 * Looks to match the characters the constitute the token ESC_SEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mESC_SEQ()
{
    ANTLR_UINT32	_type;
      



    {
        //  HLSL.g:191:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | OCTAL_ESC )

        ANTLR_UINT32 alt17;

        alt17=2;

        switch ( this->LA(1) )
        {
        case '\\':
        	{
        		switch ( this->LA(2) )
        		{
        		case '"':
        		case '\'':
        		case '\\':
        		case 'b':
        		case 'f':
        		case 'n':
        		case 'r':
        		case 't':
        			{
        				alt17=1;
        			}
        		    break;
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				alt17=2;
        			}
        		    break;

        		default:
        		    ExceptionBaseType* ex = new ANTLR_Exception< HLSLLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        		    ex->set_decisionNum( 17 );
        		    ex->set_state( 1 );


        		    goto ruleESC_SEQEx;

        		}

        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< HLSLLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 17 );
            ex->set_state( 0 );


            goto ruleESC_SEQEx;

        }

        switch (alt17)
        {
    	case 1:
    	    // HLSL.g:191:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleESC_SEQEx;
    	        }


    	        if ( this->LA(1) == '"' || this->LA(1) == '\'' || this->LA(1) == '\\' || this->LA(1) == 'b' || this->LA(1) == 'f' || this->LA(1) == 'n' || this->LA(1) == 'r' || this->LA(1) == 't' )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleESC_SEQEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // HLSL.g:192:9: OCTAL_ESC
    	    {
    	        /* 192:9: OCTAL_ESC */
    	        mOCTAL_ESC();
    	        if  (this->hasException())
    	        {
    	            goto ruleESC_SEQEx;
    	        }



    	    }
    	    break;

        }
    }

    // This is where rules clean up and exit
    //
    goto ruleESC_SEQEx; /* Prevent compiler warnings */
    ruleESC_SEQEx: ;

}
// $ANTLR end ESC_SEQ

//   Comes from: 197:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OCTAL_ESC
 *
 * Looks to match the characters the constitute the token OCTAL_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mOCTAL_ESC()
{
    ANTLR_UINT32	_type;
      



    {
        //  HLSL.g:197:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )

        ANTLR_UINT32 alt18;

        alt18=3;

        switch ( this->LA(1) )
        {
        case '\\':
        	{
        		switch ( this->LA(2) )
        		{
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        							{
        								alt18=1;
        							}
        						    break;

        						default:
        						    alt18=2;
        						}

        					}
        				    break;

        				default:
        				    alt18=3;
        				}

        			}
        		    break;
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						alt18=2;
        					}
        				    break;

        				default:
        				    alt18=3;
        				}

        			}
        		    break;

        		default:
        		    ExceptionBaseType* ex = new ANTLR_Exception< HLSLLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        		    ex->set_decisionNum( 18 );
        		    ex->set_state( 1 );


        		    goto ruleOCTAL_ESCEx;

        		}

        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< HLSLLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 18 );
            ex->set_state( 0 );


            goto ruleOCTAL_ESCEx;

        }

        switch (alt18)
        {
    	case 1:
    	    // HLSL.g:197:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '3')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // HLSL.g:198:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // HLSL.g:199:9: '\\\\' ( '0' .. '7' )
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< HLSLLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	    }
    	    break;

        }
    }

    // This is where rules clean up and exit
    //
    goto ruleOCTAL_ESCEx; /* Prevent compiler warnings */
    ruleOCTAL_ESCEx: ;

}
// $ANTLR end OCTAL_ESC

//   Comes from: 202:2: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LEFT_CURLY
 *
 * Looks to match the characters the constitute the token LEFT_CURLY
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mLEFT_CURLY()
{
    ANTLR_UINT32	_type;
      


    _type	    = LEFT_CURLY;


    // HLSL.g:202:2: ( '{' )
    // HLSL.g:202:4: '{'
    {
         this->matchc('{');
        if  (this->hasException())
        {
            goto ruleLEFT_CURLYEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLEFT_CURLYEx; /* Prevent compiler warnings */
    ruleLEFT_CURLYEx: ;

}
// $ANTLR end LEFT_CURLY

//   Comes from: 206:2: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RIGHT_CURLY
 *
 * Looks to match the characters the constitute the token RIGHT_CURLY
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void HLSLLexer::mRIGHT_CURLY()
{
    ANTLR_UINT32	_type;
      


    _type	    = RIGHT_CURLY;


    // HLSL.g:206:2: ( '}' )
    // HLSL.g:206:4: '}'
    {
         this->matchc('}');
        if  (this->hasException())
        {
            goto ruleRIGHT_CURLYEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleRIGHT_CURLYEx; /* Prevent compiler warnings */
    ruleRIGHT_CURLYEx: ;

}
// $ANTLR end RIGHT_CURLY

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
HLSLLexer::mTokens()
{
    {
        //  HLSL.g:1:8: ( T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | ID | INT | FLOAT | COMMENT | WS | STRING | LEFT_CURLY | RIGHT_CURLY )

        ANTLR_UINT32 alt19;

        alt19=37;

        alt19 = cdfa19.predict(this, this->get_rec(), this->get_istream(), cdfa19 );
        if  (this->hasException())
        {
            goto ruleTokensEx;
        }

        switch (alt19)
        {
    	case 1:
    	    // HLSL.g:1:10: T__16
    	    {
    	        /* 1:10: T__16 */
    	        mT__16();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // HLSL.g:1:16: T__17
    	    {
    	        /* 1:16: T__17 */
    	        mT__17();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // HLSL.g:1:22: T__18
    	    {
    	        /* 1:22: T__18 */
    	        mT__18();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // HLSL.g:1:28: T__19
    	    {
    	        /* 1:28: T__19 */
    	        mT__19();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // HLSL.g:1:34: T__20
    	    {
    	        /* 1:34: T__20 */
    	        mT__20();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // HLSL.g:1:40: T__21
    	    {
    	        /* 1:40: T__21 */
    	        mT__21();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // HLSL.g:1:46: T__22
    	    {
    	        /* 1:46: T__22 */
    	        mT__22();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // HLSL.g:1:52: T__23
    	    {
    	        /* 1:52: T__23 */
    	        mT__23();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // HLSL.g:1:58: T__24
    	    {
    	        /* 1:58: T__24 */
    	        mT__24();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // HLSL.g:1:64: T__25
    	    {
    	        /* 1:64: T__25 */
    	        mT__25();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // HLSL.g:1:70: T__26
    	    {
    	        /* 1:70: T__26 */
    	        mT__26();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // HLSL.g:1:76: T__27
    	    {
    	        /* 1:76: T__27 */
    	        mT__27();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // HLSL.g:1:82: T__28
    	    {
    	        /* 1:82: T__28 */
    	        mT__28();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // HLSL.g:1:88: T__29
    	    {
    	        /* 1:88: T__29 */
    	        mT__29();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // HLSL.g:1:94: T__30
    	    {
    	        /* 1:94: T__30 */
    	        mT__30();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // HLSL.g:1:100: T__31
    	    {
    	        /* 1:100: T__31 */
    	        mT__31();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // HLSL.g:1:106: T__32
    	    {
    	        /* 1:106: T__32 */
    	        mT__32();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // HLSL.g:1:112: T__33
    	    {
    	        /* 1:112: T__33 */
    	        mT__33();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // HLSL.g:1:118: T__34
    	    {
    	        /* 1:118: T__34 */
    	        mT__34();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // HLSL.g:1:124: T__35
    	    {
    	        /* 1:124: T__35 */
    	        mT__35();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    // HLSL.g:1:130: T__36
    	    {
    	        /* 1:130: T__36 */
    	        mT__36();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    // HLSL.g:1:136: T__37
    	    {
    	        /* 1:136: T__37 */
    	        mT__37();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    // HLSL.g:1:142: T__38
    	    {
    	        /* 1:142: T__38 */
    	        mT__38();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 24:
    	    // HLSL.g:1:148: T__39
    	    {
    	        /* 1:148: T__39 */
    	        mT__39();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 25:
    	    // HLSL.g:1:154: T__40
    	    {
    	        /* 1:154: T__40 */
    	        mT__40();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 26:
    	    // HLSL.g:1:160: T__41
    	    {
    	        /* 1:160: T__41 */
    	        mT__41();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 27:
    	    // HLSL.g:1:166: T__42
    	    {
    	        /* 1:166: T__42 */
    	        mT__42();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 28:
    	    // HLSL.g:1:172: T__43
    	    {
    	        /* 1:172: T__43 */
    	        mT__43();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 29:
    	    // HLSL.g:1:178: T__44
    	    {
    	        /* 1:178: T__44 */
    	        mT__44();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 30:
    	    // HLSL.g:1:184: ID
    	    {
    	        /* 1:184: ID */
    	        mID();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 31:
    	    // HLSL.g:1:187: INT
    	    {
    	        /* 1:187: INT */
    	        mINT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 32:
    	    // HLSL.g:1:191: FLOAT
    	    {
    	        /* 1:191: FLOAT */
    	        mFLOAT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 33:
    	    // HLSL.g:1:197: COMMENT
    	    {
    	        /* 1:197: COMMENT */
    	        mCOMMENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 34:
    	    // HLSL.g:1:205: WS
    	    {
    	        /* 1:205: WS */
    	        mWS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 35:
    	    // HLSL.g:1:208: STRING
    	    {
    	        /* 1:208: STRING */
    	        mSTRING();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 36:
    	    // HLSL.g:1:215: LEFT_CURLY
    	    {
    	        /* 1:215: LEFT_CURLY */
    	        mLEFT_CURLY();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 37:
    	    // HLSL.g:1:226: RIGHT_CURLY
    	    {
    	        /* 1:226: RIGHT_CURLY */
    	        mRIGHT_CURLY();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */



/* End of code
 * =============================================================================
 */
