#include "HLSLConverter.h"
#include "HLSLLexer.hpp"
#include "HLSLParser.hpp"
#include <iostream>


int HLSLConverter::ParseAst(
    lua_State * lua_state
    )
{
    HLSLConverter
        converter( lua_state );
    int
        top;
    
    lua_newtable( lua_state );
    top = lua_gettop( lua_state );
    
    converter.LoadAst( lua_tostring( lua_state, -2 ) );

    if( top != lua_gettop( lua_state ) )
    {
        std::cerr << "Something went wrong with the parsing, there's items left on the stack : it was " << top
                  << " now is " << lua_gettop( lua_state ) << std::endl;
    }
    
    assert( lua_istable( lua_state, -1 ) );

    return 1;   
}

void HLSLConverter::LoadAst(
    const std::string & filename
    )
{
    HLSLLexerTraits::InputStreamType input( (ANTLR_UINT8*)filename.c_str(), ANTLR_ENC_8BIT);
    HLSLLexer lexer(&input); // TLexerNew is generated by ANTLR
    HLSLLexerTraits::TokenStreamType token_stream(ANTLR_SIZE_HINT, lexer.get_tokSource() );
    HLSLParser parser(&token_stream); // TParserNew is generated by ANTLR3

    parser.Listener = &Listener;
    parser.translation_unit();
    
}