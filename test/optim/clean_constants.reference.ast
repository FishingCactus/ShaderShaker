
{
    variable_declaration
    {
        storage{},
        modifier{},
        type{"float"},
        variable
        {
            "scalar_float_with_value",
            literal{"0.5f"}
        }
    },
    struct_definition
    {
        "VS_OUTPUT",
        field
        {
            type{"float4"},
            ID{"Position"},
            semantic{"SV_POSITION"}
        },
        field
        {
            type{"float4"},
            ID{"Diffuse"},
            semantic{"COLOR0"}
        },
        field
        {
            type{"float2"},
            ID{"TextureUV"},
            semantic{"TEXCOORD0"}
        }
    },
    function
    {
        type{"VS_OUTPUT"},
        ID{"RenderSceneVS"},
        argument_list
        {
            argument
            {
                type{"float4"},
                ID{"vPos"},
                semantic{"POSITION"}
            },
            argument
            {
                type{"float3"},
                ID{"vNormal"},
                semantic{"NORMAL"}
            },
            argument
            {
                type{"float2"},
                ID{"vTexCoord0"},
                semantic{"TEXCOORD"}
            },
            argument
            {
                input_modifier{"uniform"},
                type{"int"},
                ID{"nNumLights"}
            },
            argument
            {
                input_modifier{"uniform"},
                type{"bool"},
                ID{"bTexture"}
            },
            argument
            {
                input_modifier{"uniform"},
                type{"bool"},
                ID{"bAnimate"}
            }
        },
        function_body
        {
            variable_declaration
            {
                storage{},
                modifier{},
                type{"VS_OUTPUT"},
                variable{"Output"}
            },
            variable_declaration
            {
                storage{},
                modifier{"const"},
                type{"float"},
                variable
                {
                    "d",
                    literal{"1.0"}
                }
            },
            variable_declaration
            {
                storage{},
                modifier{"const"},
                type{"float"},
                variable
                {
                    "e",
                    literal{"2.0"}
                }
            },
            variable_declaration
            {
                storage{},
                modifier{"const"},
                type{"float"},
                variable
                {
                    "f",
                    literal{"3.0"}
                }
            },
            variable_declaration
            {
                storage{},
                modifier{"const"},
                type{"float"},
                variable
                {
                    "g",
                    +
                    {
                        literal{"40"},
                        variable{"scalar_float_with_value"}
                    }
                }
            },
            =_statement
            {
                swizzle
                {
                    postfix
                    {
                        variable{"output"},
                        variable{"Position"}
                    },
                    "x"
                },
                +
                {
                    variable{"d"},
                    variable{"e"}
                }
            },
            return{variable{"Output"}}
        }
    },
    function
    {
        type{"VS_OUTPUT"},
        ID{"RenderSceneVS1ltlfla"},
        argument_list
        {
            argument
            {
                type{"float4"},
                ID{"vPos"},
                semantic{"POSITION"}
            },
            argument
            {
                type{"float3"},
                ID{"vNormal"},
                semantic{"NORMAL"}
            },
            argument
            {
                type{"float2"},
                ID{"vTexCoord0"},
                semantic{"TEXCOORD"}
            }
        },
        function_body
        {
            variable_declaration
            {
                storage{},
                modifier{},
                type{"VS_OUTPUT"},
                variable{"Output"}
            },
            variable_declaration
            {
                storage{},
                modifier{"const"},
                type{"float"},
                variable
                {
                    "d",
                    literal{"1.0"}
                }
            },
            variable_declaration
            {
                storage{},
                modifier{"const"},
                type{"float"},
                variable
                {
                    "e",
                    literal{"2.0"}
                }
            },
            variable_declaration
            {
                storage{},
                modifier{"const"},
                type{"float"},
                variable
                {
                    "f",
                    literal{"3.0"}
                }
            },
            variable_declaration
            {
                storage{},
                modifier{"const"},
                type{"float"},
                variable
                {
                    "g",
                    +
                    {
                        literal{"40"},
                        variable{"scalar_float_with_value"}
                    }
                }
            },
            =_statement
            {
                swizzle
                {
                    postfix
                    {
                        variable{"output"},
                        variable{"Position"}
                    },
                    "x"
                },
                +
                {
                    variable{"d"},
                    variable{"e"}
                }
            },
            return{variable{"Output"}}
        }
    },
    technique
    {
        "Default",
        pass
        {
            "P0",
            shader_call
            {
                "VertexShader",
                "vs_3_0",
                "RenderSceneVS1ltlfla"
            }
        }
    }
}