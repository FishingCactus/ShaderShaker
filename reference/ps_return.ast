
{
    struct_definition
    {
        "VS_TEXTURED_INPUT",
        field
        {
            type{"float2"},
            ID{"Position"},
            semantic{"POSITION"}
        },
        field
        {
            type{"float2"},
            ID{"TextureCoordinate"},
            semantic{"TEXCOORD0"}
        }
    },
    struct_definition
    {
        "VS_TEXTURED_OUTPUT",
        field
        {
            type{"float4"},
            ID{"Position"},
            semantic{"POSITION"}
        },
        field
        {
            type{"float2"},
            ID{"TextureCoordinate"},
            semantic{"TEXCOORD0"}
        }
    },
    function
    {
        type{"float2"},
        ID{"HelloWorld"},
        argument_list
        {
            argument
            {
                input_modifier{"uniform"},
                type{"float2"},
                ID{"toto"}
            }
        },
        function_body
        {
            return
            {
                *
                {
                    variable{"toto"},
                    literal{"1.5f"}
                }
            }
        }
    },
    function
    {
        type{"VS_TEXTURED_OUTPUT"},
        ID{"vs"},
        argument_list
        {
            argument
            {
                type{"VS_TEXTURED_INPUT"},
                ID{"input"}
            },
            argument
            {
                input_modifier{"uniform"},
                type{"bool"},
                ID{"hello"}
            },
            argument
            {
                input_modifier{"uniform"},
                type{"float2"},
                ID{"toto"}
            }
        },
        function_body
        {
            variable_declaration
            {
                storage{},
                modifier{},
                type{"VS_TEXTURED_OUTPUT"},
                variable{"output"}
            },
            =_statement
            {
                postfix
                {
                    variable{"output"},
                    variable{"Position"}
                },
                constructor
                {
                    type{"float4"},
                    argument_expression_list
                    {
                        postfix
                        {
                            variable{"input"},
                            variable{"Position"}
                        },
                        literal{"0"},
                        literal{"1"}
                    }
                }
            },
            =_statement
            {
                postfix
                {
                    variable{"output"},
                    variable{"TextureCoordinate"}
                },
                *
                {
                    postfix
                    {
                        variable{"input"},
                        variable{"TextureCoordinate"}
                    },
                    variable{"toto"}
                }
            },
            if
            {
                if_block
                {
                    variable{"hello"},
                    block
                    {
                        *=_statement
                        {
                            postfix
                            {
                                variable{"output"},
                                variable{"TextureCoordinate"}
                            },
                            call
                            {
                                "HelloWorld",
                                argument_expression_list{variable{"toto"}}
                            }
                        }
                    }
                }
            },
            return{variable{"output"}}
        }
    },
    function
    {
        type{"VS_TEXTURED_OUTPUT"},
        ID{"vsflft0l1l2l*aca"},
        argument_list
        {
            argument
            {
                type{"VS_TEXTURED_INPUT"},
                ID{"input"}
            }
        },
        function_body
        {
            variable_declaration
            {
                storage{},
                modifier{},
                type{"VS_TEXTURED_OUTPUT"},
                variable{"output"}
            },
            =_statement
            {
                postfix
                {
                    variable{"output"},
                    variable{"Position"}
                },
                constructor
                {
                    type{"float4"},
                    argument_expression_list
                    {
                        postfix
                        {
                            variable{"input"},
                            variable{"Position"}
                        },
                        literal{"0"},
                        literal{"1"}
                    }
                }
            },
            =_statement
            {
                postfix
                {
                    variable{"output"},
                    variable{"TextureCoordinate"}
                },
                *
                {
                    postfix
                    {
                        variable{"input"},
                        variable{"TextureCoordinate"}
                    },
                    variable{"toto"}
                }
            },
            nop{},
            return{variable{"output"}}
        }
    },
    function
    {
        type{"float4"},
        ID{"pixel_shader_common"},
        argument_list
        {
            argument
            {
                type{"float2"},
                ID{"texture_coordinate"},
                semantic{"TEXCOORD0"}
            },
            argument
            {
                input_modifier{"uniform"},
                type{"bool"},
                ID{"it_use_shadow_mask"}
            }
        },
        function_body
        {
            variable_declaration
            {
                storage{},
                modifier{},
                type{"float4"},
                variable
                {
                    "result",
                    initial_value_table
                    {
                        literal{"0.0f"},
                        literal{"0.0f"},
                        literal{"0.0f"},
                        literal{"0.0f"}
                    }
                }
            },
            return{variable{"result"}}
        }
    },
    function
    {
        type{"float4"},
        ID{"ps"},
        argument_list
        {
            argument
            {
                type{"float2"},
                ID{"texture_coordinate"},
                semantic{"TEXCOORD0"}
            },
            argument
            {
                input_modifier{"uniform"},
                type{"bool"},
                ID{"it_use_shadow_mask"}
            }
        },
        semantic{"COLOR0"},
        function_body
        {
            return
            {
                call
                {
                    "pixel_shader_common",
                    argument_expression_list
                    {
                        variable{"texture_coordinate"},
                        variable{"it_use_shadow_mask"}
                    }
                }
            }
        }
    },
    function
    {
        type{"float4"},
        ID{"ps_with_water"},
        argument_list
        {
            argument
            {
                type{"float2"},
                ID{"texture_coordinate"},
                semantic{"TEXCOORD0"}
            },
            argument
            {
                type{"float2"},
                ID{"vpos"},
                semantic{"VPOS"}
            },
            argument
            {
                input_modifier{"uniform"},
                type{"bool"},
                ID{"it_use_shadow_mask"}
            }
        },
        semantic{"COLOR0"},
        function_body
        {
            variable_declaration
            {
                storage{},
                modifier{},
                type{"float4"},
                variable{"color_multiplier"}
            },
            return
            {
                *
                {
                    variable{"color_multiplier"},
                    call
                    {
                        "pixel_shader_common",
                        argument_expression_list
                        {
                            variable{"texture_coordinate"},
                            variable{"it_use_shadow_mask"}
                        }
                    }
                }
            }
        }
    },
    function
    {
        type{"float4"},
        ID{"ps_with_watertla"},
        argument_list
        {
            argument
            {
                type{"float2"},
                ID{"texture_coordinate"},
                semantic{"TEXCOORD0"}
            },
            argument
            {
                type{"float2"},
                ID{"vpos"},
                semantic{"VPOS"}
            }
        },
        semantic{"COLOR0"},
        function_body
        {
            variable_declaration
            {
                storage{},
                modifier{},
                type{"float4"},
                variable{"color_multiplier"}
            },
            return
            {
                *
                {
                    variable{"color_multiplier"},
                    call
                    {
                        "pixel_shader_common",
                        argument_expression_list
                        {
                            variable{"texture_coordinate"},
                            variable{"it_use_shadow_mask"}
                        }
                    }
                }
            }
        }
    },
    technique
    {
        "DefaultWithShadowMapAndWater",
        pass
        {
            "P0",
            shader_call
            {
                "VertexShader",
                "vs_3_0",
                "vsflft0l1l2l*aca"
            },
            shader_call
            {
                "PixelShader",
                "ps_3_0",
                "ps_with_watertla"
            }
        }
    }
}